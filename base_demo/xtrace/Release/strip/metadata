/* CTF 1.8 */

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015-2020 Philippe Proulx <pproulx@efficios.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 *
 * The following code was generated by barectf v3.0.1
 * on 2022-06-22T21:27:42.063940.
 *
 * For more details, see <https://barectf.org/>.
 */

trace {
	major = 1;
	minor = 8;
	byte_order = le;
	packet.header := struct {
		integer {
			signed = false;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} magic;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} stream_id;
	} align(8);
};

env {
	domain = "kernel";
	tracer_name = "lttng-modules";
	tracer_major = 2;
	tracer_minor = 10;
	tracer_patch = 1;
	tracer_pre = "";
	barectf_gen_date = "2022-06-22T21:27:42.063940";
	sysname = "SylixOS";
};

clock {
	name = perf_counter;
	freq = 1000000000;
	precision = 0;
	offset_s = 0;
	offset = 0;
	absolute = false;
};

/* Data stream type `default` */
stream {
	id = 0;
	packet.context := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} packet_size;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} content_size;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
			map = clock.perf_counter.value;
		} timestamp_begin;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
			map = clock.perf_counter.value;
		} timestamp_end;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} events_discarded;
		integer {
			signed = false;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} cpu_id;
	} align(8);
	event.header := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} id;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
			map = clock.perf_counter.value;
		} timestamp;
	} align(8);
};

event {
	stream_id = 0;
	id = 0;
	name = "block_rq_complete";
	fields := struct {
		integer {
			signed = false;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _dev;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _sector;
		integer {
			signed = false;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _nr_sector;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _error;
		integer {
			signed = false;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _rwbs;
	} align(1);
};

event {
	stream_id = 0;
	id = 1;
	name = "block_rq_insert";
	fields := struct {
		integer {
			signed = false;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _dev;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _sector;
		integer {
			signed = false;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _nr_sector;
		integer {
			signed = false;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _bytes;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _tid;
		integer {
			signed = false;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _rwbs;
		integer {
			signed = true;
			size = 8;
			align = 8;
			byte_order = native;
			base = 10;
			encoding = UTF8;
		} _comm[16];
	} align(1);
};

event {
	stream_id = 0;
	id = 2;
	name = "irq_handler_entry";
	fields := struct {
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _irq;
		string {
			encoding = UTF8;
		} _name;
	} align(1);
};

event {
	stream_id = 0;
	id = 3;
	name = "irq_handler_exit";
	fields := struct {
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _irq;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _ret;
	} align(1);
};

event {
	stream_id = 0;
	id = 4;
	name = "irq_softirq_entry";
	fields := struct {
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _vec;
	} align(1);
};

event {
	stream_id = 0;
	id = 5;
	name = "irq_softirq_exit";
	fields := struct {
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _vec;
	} align(1);
};

event {
	stream_id = 0;
	id = 6;
	name = "irq_softirq_raise";
	fields := struct {
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _vec;
	} align(1);
};

event {
	stream_id = 0;
	id = 7;
	name = "kmem_mm_page_alloc";
	fields := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _page;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _pfn;
		integer {
			signed = false;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _order;
		integer {
			signed = false;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _gfp_flags;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _migratetype;
	} align(1);
};

event {
	stream_id = 0;
	id = 8;
	name = "kmem_mm_page_free";
	fields := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _page;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _pfn;
		integer {
			signed = false;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _order;
	} align(1);
};

event {
	stream_id = 0;
	id = 9;
	name = "lttng_statedump_process_state";
	fields := struct {
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _tid;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _pid;
		integer {
			signed = true;
			size = 8;
			align = 8;
			byte_order = native;
			base = 10;
			encoding = UTF8;
		} _name[16];
		integer {
			signed = false;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _parent_ns_inum;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _type;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _mode;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _submode;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _status;
		integer {
			signed = false;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _cpu;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _file_table_address;
	} align(1);
};

event {
	stream_id = 0;
	id = 10;
	name = "sched_pi_setprio";
	fields := struct {
		integer {
			signed = true;
			size = 8;
			align = 8;
			byte_order = native;
			base = 10;
			encoding = UTF8;
		} _comm[16];
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _tid;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _oldprio;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _newprio;
	} align(1);
};

event {
	stream_id = 0;
	id = 11;
	name = "sched_process_exit";
	fields := struct {
		integer {
			signed = true;
			size = 8;
			align = 8;
			byte_order = native;
			base = 10;
			encoding = UTF8;
		} _comm[16];
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _tid;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _prio;
	} align(1);
};

event {
	stream_id = 0;
	id = 12;
	name = "sched_process_fork";
	fields := struct {
		integer {
			signed = true;
			size = 8;
			align = 8;
			byte_order = native;
			base = 10;
			encoding = UTF8;
		} _parent_comm[16];
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _parent_tid;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _parent_pid;
		integer {
			signed = false;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _parent_ns_inum;
		integer {
			signed = true;
			size = 8;
			align = 8;
			byte_order = native;
			base = 10;
			encoding = UTF8;
		} _child_comm[16];
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _child_tid;
		integer {
			signed = false;
			size = 8;
			align = 8;
			byte_order = native;
			base = 10;
		} __vtids_length;
		integer {
			signed = false;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} ___vtids_len;
		integer {
			signed = true;
			size = 32;
			align = 32;
			byte_order = native;
			base = 10;
		} _vtids[___vtids_len];
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _child_pid;
		integer {
			signed = false;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _child_ns_inum;
	} align(1);
};

event {
	stream_id = 0;
	id = 13;
	name = "sched_process_free";
	fields := struct {
		integer {
			signed = true;
			size = 8;
			align = 8;
			byte_order = native;
			base = 10;
			encoding = UTF8;
		} _comm[16];
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _tid;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _prio;
	} align(1);
};

event {
	stream_id = 0;
	id = 14;
	name = "sched_process_wait";
	fields := struct {
		integer {
			signed = true;
			size = 8;
			align = 8;
			byte_order = native;
			base = 10;
			encoding = UTF8;
		} _comm[16];
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _tid;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _prio;
	} align(1);
};

event {
	stream_id = 0;
	id = 15;
	name = "sched_switch";
	fields := struct {
		integer {
			signed = true;
			size = 8;
			align = 8;
			byte_order = native;
			base = 10;
			encoding = UTF8;
		} _prev_comm[16];
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _prev_tid;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _prev_prio;
		integer {
			signed = true;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _prev_state;
		integer {
			signed = true;
			size = 8;
			align = 8;
			byte_order = native;
			base = 10;
			encoding = UTF8;
		} _next_comm[16];
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _next_tid;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _next_prio;
	} align(1);
};

event {
	stream_id = 0;
	id = 16;
	name = "sched_wait_task";
	fields := struct {
		integer {
			signed = true;
			size = 8;
			align = 8;
			byte_order = native;
			base = 10;
			encoding = UTF8;
		} _comm[16];
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _tid;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _prio;
	} align(1);
};

event {
	stream_id = 0;
	id = 17;
	name = "sched_wakeup";
	fields := struct {
		integer {
			signed = true;
			size = 8;
			align = 8;
			byte_order = native;
			base = 10;
			encoding = UTF8;
		} _comm[16];
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _tid;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _prio;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _target_cpu;
	} align(1);
};

event {
	stream_id = 0;
	id = 18;
	name = "sched_wakeup_new";
	fields := struct {
		integer {
			signed = true;
			size = 8;
			align = 8;
			byte_order = native;
			base = 10;
			encoding = UTF8;
		} _comm[16];
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _tid;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _prio;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _target_cpu;
	} align(1);
};

event {
	stream_id = 0;
	id = 19;
	name = "syscall_entry_futex";
	fields := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _uaddr;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _op;
		integer {
			signed = false;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _val;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _utime;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _uaddr2;
		integer {
			signed = false;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _val3;
	} align(1);
};

event {
	stream_id = 0;
	id = 20;
	name = "syscall_exit_futex";
	fields := struct {
		integer {
			signed = true;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _ret;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _uaddr;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _uaddr2;
	} align(1);
};

event {
	stream_id = 0;
	id = 21;
	name = "timer_hrtimer_cancel";
	fields := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _hrtimer;
	} align(1);
};

event {
	stream_id = 0;
	id = 22;
	name = "timer_hrtimer_expire_entry";
	fields := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _hrtimer;
		integer {
			signed = true;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _now;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _function;
	} align(1);
};

event {
	stream_id = 0;
	id = 23;
	name = "timer_hrtimer_expire_exit";
	fields := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _hrtimer;
	} align(1);
};

event {
	stream_id = 0;
	id = 24;
	name = "timer_hrtimer_start";
	fields := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _hrtimer;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _function;
		integer {
			signed = true;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _expires;
		integer {
			signed = true;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _softexpires;
		integer {
			signed = false;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _mode;
	} align(1);
};
